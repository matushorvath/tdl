name: Prebuild TDLib
# This workflow can be executed using a command like this:
# gh workflow run prebuilt-tdlib.yml --ref develop -f tdlib=v1.8.0 \
# -f npm-version=0.1008000.0 -f npm-tag=latest -f npm-add-tag=td-1.8.0
on:
  workflow_dispatch:
    inputs:
      tdlib:
        description: 'TDLib git ref (e.g. v1.8.0 or a commit hash)'
        type: string
        required: true
      npm-version:
        description: 'prebuilt-tdlib version to publish on npm'
        type: string
        required: false
      npm-tag:
        description: 'npm tag (e.g. latest, beta), required to publish'
        type: string
        required: false
      npm-add-tag:
        description: 'Additional npm tag (e.g. td-1.8.0)'
        type: string
        required: false
# NOTE: The ZLIB_USE_STATIC_LIBS option requires CMake >= 3.24
jobs:
  build-linux-x64:
    name: Build TDLib on Linux x86_64 (glibc)
    runs-on: ubuntu-20.04
    container: amazonlinux:2
    steps:
      - name: Install tools
        run: |
          yum -y groupinstall "Development Tools"
          yum -y install openssl11 openssl11-devel openssl11-static php gperf cmake3
      - uses: actions/checkout@v3
        with:
          repository: 'tdlib/td'
          ref: ${{ inputs.tdlib }}
      - name: CMake version
        run: cmake3 --version
      - name: Build TDLib
        run: |
          mkdir -p build && cd build
          cmake3 -DCMAKE_BUILD_TYPE=Release \
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake3 --build . --target tdjson -- -j 2
          cd ..
      - name: Strip
        run: strip build/libtdjson.so
      - name: Info
        run: |
          uname -a
          ldd --version
          openssl11 version
          ldd build/libtdjson.so
      - uses: actions/upload-artifact@v3
        with:
          name: tdlib-linux-x64
          path: build/libtdjson.so

  test:
    name: 'Test the ${{ matrix.os[1] }} prebuilt libraries'
    needs: [build-linux-x64]
    runs-on: ${{ matrix.os[0] }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - [ubuntu-20.04, tdlib-linux-x64, libtdjson.so]
        node:
          - 16
    env:
      LIBTDJSON_PATH: ${{ matrix.os[2] }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: npm
      - name: Update npm
        run: npm install -g npm@7
      - run: npm install
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os[1] }}
      - run: npm run integration-tests

  publish:
    name: 'Publish to npm'
    needs: [test]
    if: "${{ inputs.npm-version != '' }}"
    runs-on: ubuntu-latest
    env:
      TEST_PREBUILT: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          # registry-url is mandatory here
          registry-url: 'https://registry.npmjs.org'
      - name: Update npm
        run: npm install -g npm@7
      - run: npm install
      - uses: actions/download-artifact@v3
        with:
          path: packages/prebuilt-tdlib/prebuilds/
      - run: tree packages/prebuilt-tdlib
      - run: npm run integration-tests
      - run: node packages/prebuilt-tdlib/check-prebuilds.js
      - name: Update version
        run: npm version ${{ inputs.npm-version }} --no-git-tag-version -w prebuilt-tdlib-amazon-linux-2
      - name: Publish
        if: "${{ inputs.npm-tag != '' }}"
        run: npm publish --tag ${{ inputs.npm-tag }} -w prebuilt-tdlib-amazon-linux-2
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Update the additional tag
        if: "${{ inputs.npm-tag != '' && inputs.npm-add-tag != '' }}"
        run: |
          npm dist-tag add \
            prebuilt-tdlib-amazon-linux-2@${{ inputs.npm-version }} ${{ inputs.npm-add-tag }} \
            -w prebuilt-tdlib-amazon-linux-2
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
